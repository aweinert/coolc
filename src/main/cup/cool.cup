/*
 * cool.cup
 *
 * CS164: Spring 2004 
 * Programming Assignment 3
 *
 * Parser definition for the Cool language.
 *
 */

import java_cup.runtime.*;
import net.alexweinert.coolc.processors.cool.frontend.lexer.Lexer;
import net.alexweinert.coolc.processors.cool.frontend.ParserErrorHandler;
import net.alexweinert.coolc.representations.cool.symboltables.*;
import net.alexweinert.coolc.representations.cool.ast.*;

/* Code enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((Lexer)parser.getScanner()).get_curr_lineno();
    }

    String curr_filename() {
	return ((Lexer)parser.getScanner()).curr_filename();
    }

:} 

parser code {:

	final ParserErrorHandler error = new ParserErrorHandler();

	public ParserErrorHandler getErrorHandler() {
		return this.error;
	}

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
		String filename = action_obj.curr_filename();
		this.error.parseError(filename, lineno, -1, cur_token.sym);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}


/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */
terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal StringSymbol STR_CONST;
terminal IntSymbol INT_CONST;
terminal Boolean BOOL_CONST;
terminal IdSymbol TYPEID, OBJECTID;


/*
 * Declare types for the grammar's non-terminals.
 *
 * Hint: You will have to add/modify this list.
 */
nonterminal Program program;
nonterminal Classes class_list;
nonterminal ClassNode class_node;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Expression expr, opt_init, nested_let, let_expression;
nonterminal ArgumentExpressions actuals, exp_list;
nonterminal BlockExpressions block_body;
nonterminal Formals formals;
nonterminal Formal formal;
nonterminal Case case;
nonterminal Cases cases;
nonterminal IdSymbol opt_inherits;


/*
 * Precedence declarations.
 */
precedence right ASSIGN;
precedence left NOT;
precedence left LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

/***********************************************************************
 * Grammar rules.                                                      *
 *                                                                     *
 * Some parts of rules have been provided for you as an example and    *
 * to get you started.  You should not need to modify this code to get *
 * a working solution, but you are welcome to if you like.  However,   *
 * do not assume that any particular rule is complete.                 *
 ***********************************************************************/

/* Program */
program	
	/* A program is nothing but a list of classes. Errors are handled in the 
	 * class_list nonterminal */
	::= class_list:cl
	    {: RESULT = new Program(curr_filename(), 1, cl); :}
	;


class_list
	/* Base case, start with empty class list */
	::=
	    {: RESULT = (new Classes(curr_filename(), 1)); :}
	/* Append a class to the current list of classes */
	| class_list:cl class_node:c SEMI
	    {: RESULT = cl.add(c); :}
	/* Error in a class definition, jump over it */
	| class_list:cl error SEMI
		{: RESULT = cl; :}
	;


/* Class declarations */
class_node
	::= CLASS:c TYPEID:n opt_inherits:inherits LBRACE feature_list:def RBRACE
	    {: RESULT = new ClassNode(curr_filename(), cleft, n, inherits, def); :}
	;

/* Optional inherits-declaration */
opt_inherits
	::= /* No inherits declaration */
		{: RESULT = IdTable.getInstance().getObjectSymbol(); :}
	/* Actual inherits declaration */
	| INHERITS TYPEID:typeid
		{: RESULT = typeid; :}
	;

/* The list of features that make up the class */
feature_list
	/* Base case, start with empty list */
	::= 
		{: RESULT = (new Features(curr_filename(), curr_lineno())); :}
	/* Add a new feature to the list */
	| feature_list:fl feature:f SEMI
		{: RESULT = fl.add(f); :}
	/* If there is an error while parsing a feature, ignore it */
	| feature_list:fl error SEMI
		{: RESULT = fl; :}
	;

/* The actual feature, may be an attribute or a method */
feature
	/* Parse a method */
	::= OBJECTID:name formals:args COLON TYPEID:return_type LBRACE expr:body RBRACE
		{: RESULT = new Method(curr_filename(), curr_lineno(), name, args, return_type, body); :}
	/* Parse an attribute, with optional initialization */
	| OBJECTID:name COLON TYPEID:type opt_init:init
		{: RESULT = new Attribute(curr_filename(), curr_lineno(), name, type, init); :};

/* Optional initialization */
opt_init
	/* Actual initialization */
	::= ASSIGN expr:init
		{: RESULT = init; :}
	/* Missing initialization, initialize with no_expr */
	|
		{: RESULT = new NoExpression(curr_filename(), curr_lineno()); :}
		;

/* The set of all formal parameters of a method */
formals
	/* No arguments */
	::= LPAREN RPAREN
	    {: RESULT = new Formals(curr_filename(), curr_lineno()); :}
	/* List of names */
	| LPAREN formal:f
		{: RESULT = (new Formals(curr_filename(), curr_lineno())).add(f); :}
	/* Add a new formal to the list */
	| formals:fl COMMA formal:f
		{: RESULT = fl.add(f); :}
	/* Finish the list off */
	| formals:fl RPAREN
		{: RESULT = fl; :}
	;

/* A single formal parameter of a method */
formal
	::= OBJECTID:name COLON TYPEID:type
		{: RESULT = new Formal(curr_filename(), curr_lineno(), name, type); :};

/* Expressions */
expr
	/* Arithmetic expressions */
	::= expr:e1 PLUS expr:e2
	    {: RESULT = new Addition(curr_filename(), curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	    {: RESULT = new Subtraction(curr_filename(), curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	    {: RESULT = new Multiplication(curr_filename(), curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
	    {: RESULT = new Division(curr_filename(), curr_lineno(), e1, e2); :}
	| NEG expr:e
	    {: RESULT = new ArithmeticNegation(curr_filename(), curr_lineno(), e); :}
	| expr:e1 LT expr:e2
	    {: RESULT = new LessThan(curr_filename(), curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
	    {: RESULT = new Equality(curr_filename(), curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	    {: RESULT = new LessThanOrEquals(curr_filename(), curr_lineno(), e1, e2); :}
	| NOT expr:e
	    {: RESULT = new BooleanNegation(curr_filename(), curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	    {: RESULT = e; :}

	/* Statements */
	| OBJECTID:lhs ASSIGN expr:rhs
		{: RESULT = new Assign(curr_filename(), curr_lineno(), lhs, rhs); :}
	| NEW TYPEID:type
		{: RESULT = new New(curr_filename(), curr_lineno(), type); :}
	| ISVOID expr:expr
		{: RESULT = new IsVoid(curr_filename(), curr_lineno(), expr); :}

	/* Control structures */
	| CASE expr:expr OF cases:cases ESAC
		{: RESULT = new Typecase(curr_filename(), curr_lineno(), expr, cases); :}
	| IF expr:cond_expr THEN expr:then_expr ELSE expr:else_expr FI
		{: RESULT = new If(curr_filename(), curr_lineno(), cond_expr, then_expr, else_expr); :}
	| WHILE expr:cond LOOP expr:body POOL
		{: RESULT = new Loop(curr_filename(), curr_lineno(), cond, body); :}
	| let_expression:let /* Factor out let expression to give lowest precedence to let-expression */
		{: RESULT = let; :}
	| LBRACE block_body:body RBRACE
		{: RESULT = new Block(curr_filename(), curr_lineno(), body); :}

	/* Method calls */
	| OBJECTID:n actuals:a /* Call on self */
	    {: RESULT = new FunctionCall(curr_filename(), curr_lineno(), new ObjectReference(curr_filename(), curr_lineno(), IdTable.getInstance().addString("self")), n, a); :}
	| expr:expr DOT OBJECTID:objid actuals:actuals /* Call on variable */
		{: RESULT = new FunctionCall(curr_filename(), curr_lineno(), expr, objid, actuals); :}
	| expr:expr AT TYPEID:type DOT OBJECTID:objid actuals:actuals /* Call on casted variable */
		{: RESULT = new StaticFunctionCall(curr_filename(), curr_lineno(), expr, type, objid, actuals); :}

	/* Constants */
	| INT_CONST:i
	    {: RESULT = new IntConst(curr_filename(), curr_lineno(), i); :}
	| STR_CONST:s
	    {: RESULT = new StringConst(curr_filename(), curr_lineno(), s); :}
	| BOOL_CONST:b
	    {: RESULT = new BoolConst(curr_filename(), curr_lineno(), b); :}
	| OBJECTID:o
	    {: RESULT = new ObjectReference(curr_filename(), curr_lineno(), o); :}
	;

/* Body of a block of expressions */
block_body
	::= /* Base case, create new, empty list */
		{: RESULT = new BlockExpressions(curr_filename(), curr_lineno()); :}
	| block_body:el expr:e1 SEMI /* Add a new expression to the block */
		{: RESULT = el.add(e1); :}
	| block_body:el error SEMI /* If we have a malformed expression, just skip it */
		{: RESULT = el; :}
	;

/* Let expression, is immediatly desugared to nested let-expressions with one variable each */
let_expression
	::= LET nested_let:nested_let
		{: RESULT = nested_let; :}
	;

nested_let
	/* Base case, last let-statement in front of the actual body */
	::= OBJECTID:new_var COLON TYPEID:type opt_init:init IN expr:body
		{: RESULT = new Let(curr_filename(), curr_lineno(), new_var, type, init, body); :}
	/* Add another let-statement to the nested statements */
	| OBJECTID:new_var COLON TYPEID:type opt_init:init COMMA nested_let:inner
		{: RESULT = new Let(curr_filename(), curr_lineno(), new_var, type, init, inner); :}
	| error IN expr:body /* Error in base case, skip it */
		{: RESULT = body; :}
	| error COMMA nested_let:inner /* Error in nested case, skip it */
		{: RESULT = inner; :}
	;

/* The whole set of case-branches */
cases
	::= case:new_case /* Base case, create new empty list of branches */
		{: 	Cases new_cases = new Cases(curr_filename(), curr_lineno());
			RESULT = new_cases.add(new_case); :}
	| cases:old_cases case:new_case /* Add a new branch to the list */
		{: 	RESULT = old_cases.add(new_case); :}
	;

/* A single branch of a case-statement */
case
	::= OBJECTID:objectid COLON TYPEID:type DARROW expr:expr SEMI
		{: RESULT = new Case(curr_filename(), curr_lineno(), objectid, type, expr); :}
	;


/* Method arguments */
actuals
	/* No arguments */
	::= LPAREN RPAREN
	    {: RESULT = new ArgumentExpressions(curr_filename(), curr_lineno()); :}
	/* List of arguments */
	| LPAREN exp_list:el RPAREN
	    {: RESULT = el; :}
	;

/* Non-empty list of expressions */
exp_list
	/* One expression */
	::= expr:e
	    {: RESULT = (new ArgumentExpressions(curr_filename(), curr_lineno())).add(e); :} 
	/* Several expressions */
	| exp_list:el COMMA expr:e
	    {: RESULT = el.add(e); :}
	;
